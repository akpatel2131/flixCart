{"ast":null,"code":"var _jsxFileName = \"/Users/krunal/Desktop/Crio project/Fullstack/Flix-cart/Frontend/src/components/Cart.js\";\nimport { ShoppingCartOutlined } from \"@ant-design/icons\";\nimport { Button, Card, message, Spin, InputNumber } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { config } from \"../App\";\nimport \"./Cart.css\";\n\n/**\n * @typedef {Object} Product\n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @typedef {Object} CartItem\n * @property {string} productId - Unique ID for the product\n * @property {number} qty - Quantity of the product in cart\n * @property {Product} product - Corresponding product object for that cart item\n */\n\n/**\n * @function Cart component handles functionality for the display and manipulation of the customer's shopping cart\n *\n * Contains the following fields\n * @property {Product[]} props.products\n *    List of all available products (that the cart items can be from)\n * @property {{ push: function }} props.history\n *    To navigate and redirect the user to different routes or pages\n * @property {string} props.token\n *    Oauth token for authentication for API calls\n * @property {boolean|undefined} props.checkout\n *    Denotes if the Cart component is created in the Checkout component\n */\n\nconst Cart = ({\n  products,\n  history,\n  token,\n  checkout\n}) => {\n  console.log({\n    token\n  });\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  /**\n   * Check the response of the API call to be valid and handle any failures along the way\n   *\n   * @param {boolean} errored\n   *    Represents whether an error occurred in the process of making the API call itself\n   * @param {{ productId: string, qty: number }|{ success: boolean, message?: string }} response\n   *    The response JSON object which may contain further success or error messages\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * If the API call itself encounters an error, errored flag will be true.\n   * If the backend returns an error, then success field will be false and message field will have a string with error details to be displayed.\n   * When there is an error in the API call itself, display a generic error message and return false.\n   * When there is an error returned by backend, display the given message field and return false.\n   * When there is no error and API call is successful, return true.\n   */\n  const validateResponse = (errored, response) => {\n    if (errored) {\n      message.error(\"Could not update cart. Check that the backend is running, reachable and returns valid JSON.\");\n      return false;\n    } else if (response.message) {\n      message.error(response.message);\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Perform the API call to fetch the user's cart and return the response\n   *\n   * @returns {{ productId: string, qty: number }|{ success: boolean, message?: string }}\n   *    The response JSON object\n   *\n   * -    Set the loading state variable to true\n   * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   * -    The call must be made asynchronously using Promises or async/await\n   * -    The call must be authenticated with an authorization header containing Oauth token\n   * -    The call must handle any errors thrown from the fetch call\n   * -    Parse the result as JSON\n   * -    Set the loading state variable to false once the call has completed\n   * -    Call the validateResponse(errored, response) function defined previously\n   * -    If response passes validation, return the response object\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"productId\": \"KCRwjF7lN97HnEaY\",\n   *          \"qty\": 3\n   *      },\n   *      {\n   *          \"productId\": \"BW0jAAeDJmlZCF8i\",\n   *          \"qty\": 1\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  const getCart = async () => {\n    let response = {};\n    let errored = false;\n    setLoading(true);\n    try {\n      response = await (await fetch(`${config.endpoint}/cart`, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      })).json();\n    } catch (e) {\n      errored = true;\n    }\n    setLoading(false);\n    if (validateResponse(errored, response)) {\n      return response;\n    }\n  };\n\n  /**\n   * Perform the API call to add or update items in the user's cart\n   *\n   * @param {string} productId\n   *    ID of the product that is to be added or updated in cart\n   * @param {number} qty\n   *    How many of the product should be in the cart\n   * @param {boolean} fromAddToCartButton\n   *    If this function was triggered from the product card's \"Add to Cart\" button\n   *\n   * -    If the user is trying to add from the product card and the product already exists in cart, show an error message\n   * -    Set the loading state variable to true\n   * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   * -    The call must be made asynchronously using Promises or async/await\n   * -    The call must be authenticated with an authorization header containing Oauth token\n   * -    The call must handle any errors thrown from the fetch call\n   * -    Parse the result as JSON\n   * -    Set the loading state variable to false once the call has completed\n   * -    Call the validateResponse(errored, response) function defined previously\n   * -    If response passes validation, refresh the cart by calling refreshCart()\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * {\n   *      \"success\": true\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 404\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Product doesn't exist\"\n   * }\n   */\n  const postToCart = async (productId, qty) => {\n    let response = {};\n    let errored = false;\n    let statusCode;\n    setLoading(true);\n    try {\n      response = await (await fetch(`${config.endpoint}/cart`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          productId: productId,\n          quantity: qty\n        })\n      })).json();\n    } catch (e) {\n      errored = true;\n    }\n    setLoading(false);\n    if (validateResponse(errored, response, statusCode)) {\n      await refreshCart();\n    }\n  };\n  const putToCart = async (productId, qty) => {\n    let response = {};\n    let errored = false;\n    let statusCode;\n    setLoading(true);\n    try {\n      let response_object = await fetch(`${config.endpoint}/cart`, {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          productId: productId,\n          quantity: qty\n        })\n      });\n      statusCode = response_object.status;\n      if (statusCode !== 204) {\n        response = await response_object.json();\n      }\n    } catch (e) {\n      errored = true;\n    }\n    setLoading(false);\n    if (statusCode === \"204\" || validateResponse(errored, response, statusCode)) {\n      await refreshCart();\n    }\n  };\n\n  /**\n   * Function to get/refresh list of items in cart from backend and update state variable\n   * -    Call the previously defined getCart() function asynchronously and capture the returned value in a variable\n   * -    If the returned value exists,\n   *      -   Update items state variable with the response (optionally add the corresponding product object of that item as a sub-field)\n   * -    If the cart is being displayed from the checkout page, or the cart is empty,\n   *      -   Display an error message\n   *      -   Redirect the user to the products listing page\n   */\n  const refreshCart = async () => {\n    const cart = await getCart();\n    if (cart && cart.cartItems) {\n      setItems(cart.cartItems.map(item => ({\n        ...item,\n        product: products.find(product => product._id === item.productId)\n      })));\n    }\n    if (checkout && items.length === 0) {\n      message.error(\"Cart is empty. Please add items to the cart first\");\n      history.push(\"/\");\n    }\n  };\n  useEffect(() => {\n    refreshCart();\n  }, []);\n\n  /**\n   * Return the complete JSX for the Cart component\n   *  If the items state variable has any data, display them\n   *  Else, display the appropriate message to the user and a button to return to the product listing page\n   */\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 5\n    }\n  }, items.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart-items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }\n  }, items.map(item => /*#__PURE__*/React.createElement(Card, {\n    className: \"cart-item\",\n    key: item.productId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"cart-item-image\",\n    alt: item.product.name,\n    src: item.product.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart-item-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart-item-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 17\n    }\n  }, item.product.name), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart-item-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 17\n    }\n  }, \"Category: \", item.product.category), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart-item-price\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 17\n    }\n  }, \"\\u20B9\", item.product.cost)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart-item-actions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputNumber, {\n    min: 1,\n    max: 10,\n    defaultValue: item.qty,\n    onChange: value => putToCart(item.productId, value).catch(e => message.error(\"Could not update cart.\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 17\n    }\n  }))))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"empty-cart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ShoppingCartOutlined, {\n    className: \"empty-cart-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 11\n    }\n  }, \"Cart is empty.\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: () => history.push(\"/\"),\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 11\n    }\n  }, \"Continue Shopping\")), checkout && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart-total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 11\n    }\n  }, \"Total: \\u20B9\", items.reduce((total, item) => total + item.qty * item.product.cost, 0)), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: () => message.success(\"Order placed successfully\"),\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 11\n    }\n  }, \"Place Order\")));\n};\nexport default Cart;","map":{"version":3,"names":["ShoppingCartOutlined","Button","Card","message","Spin","InputNumber","React","useState","useEffect","config","Cart","products","history","token","checkout","console","log","items","setItems","loading","setLoading","validateResponse","errored","response","error","getCart","fetch","endpoint","method","headers","Authorization","json","e","postToCart","productId","qty","statusCode","body","JSON","stringify","quantity","refreshCart","putToCart","response_object","status","cart","cartItems","map","item","product","find","_id","length","push","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","key","alt","name","src","image","category","cost","min","max","defaultValue","onChange","value","catch","type","onClick","reduce","total","success"],"sources":["/Users/krunal/Desktop/Crio project/Fullstack/Flix-cart/Frontend/src/components/Cart.js"],"sourcesContent":["import { ShoppingCartOutlined } from \"@ant-design/icons\";\nimport { Button, Card, message, Spin, InputNumber } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { config } from \"../App\";\nimport \"./Cart.css\";\n\n/**\n * @typedef {Object} Product\n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @typedef {Object} CartItem\n * @property {string} productId - Unique ID for the product\n * @property {number} qty - Quantity of the product in cart\n * @property {Product} product - Corresponding product object for that cart item\n */\n\n/**\n * @function Cart component handles functionality for the display and manipulation of the customer's shopping cart\n *\n * Contains the following fields\n * @property {Product[]} props.products\n *    List of all available products (that the cart items can be from)\n * @property {{ push: function }} props.history\n *    To navigate and redirect the user to different routes or pages\n * @property {string} props.token\n *    Oauth token for authentication for API calls\n * @property {boolean|undefined} props.checkout\n *    Denotes if the Cart component is created in the Checkout component\n */\n\nconst Cart = ({ products, history, token, checkout }) => {\n  console.log({token})\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  /**\n   * Check the response of the API call to be valid and handle any failures along the way\n   *\n   * @param {boolean} errored\n   *    Represents whether an error occurred in the process of making the API call itself\n   * @param {{ productId: string, qty: number }|{ success: boolean, message?: string }} response\n   *    The response JSON object which may contain further success or error messages\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * If the API call itself encounters an error, errored flag will be true.\n   * If the backend returns an error, then success field will be false and message field will have a string with error details to be displayed.\n   * When there is an error in the API call itself, display a generic error message and return false.\n   * When there is an error returned by backend, display the given message field and return false.\n   * When there is no error and API call is successful, return true.\n   */\n  const validateResponse = (errored, response) => {\n    if (errored) {\n      message.error(\n        \"Could not update cart. Check that the backend is running, reachable and returns valid JSON.\"\n      );\n      return false;\n    } else if (response.message) {\n      message.error(response.message);\n      return false;\n    }\n\n    return true;\n  };\n\n  /**\n   * Perform the API call to fetch the user's cart and return the response\n   *\n   * @returns {{ productId: string, qty: number }|{ success: boolean, message?: string }}\n   *    The response JSON object\n   *\n   * -    Set the loading state variable to true\n   * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   * -    The call must be made asynchronously using Promises or async/await\n   * -    The call must be authenticated with an authorization header containing Oauth token\n   * -    The call must handle any errors thrown from the fetch call\n   * -    Parse the result as JSON\n   * -    Set the loading state variable to false once the call has completed\n   * -    Call the validateResponse(errored, response) function defined previously\n   * -    If response passes validation, return the response object\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"productId\": \"KCRwjF7lN97HnEaY\",\n   *          \"qty\": 3\n   *      },\n   *      {\n   *          \"productId\": \"BW0jAAeDJmlZCF8i\",\n   *          \"qty\": 1\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  const getCart = async () => {\n    let response = {};\n    let errored = false;\n\n    setLoading(true);\n\n    try {\n      response = await (\n        await fetch(`${config.endpoint}/cart`, {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        })\n      ).json();\n    } catch (e) {\n      errored = true;\n    }\n\n    setLoading(false);\n\n    if (validateResponse(errored, response)) {\n      return response;\n    }\n  };\n\n  /**\n   * Perform the API call to add or update items in the user's cart\n   *\n   * @param {string} productId\n   *    ID of the product that is to be added or updated in cart\n   * @param {number} qty\n   *    How many of the product should be in the cart\n   * @param {boolean} fromAddToCartButton\n   *    If this function was triggered from the product card's \"Add to Cart\" button\n   *\n   * -    If the user is trying to add from the product card and the product already exists in cart, show an error message\n   * -    Set the loading state variable to true\n   * -    Perform the API call via a fetch call: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   * -    The call must be made asynchronously using Promises or async/await\n   * -    The call must be authenticated with an authorization header containing Oauth token\n   * -    The call must handle any errors thrown from the fetch call\n   * -    Parse the result as JSON\n   * -    Set the loading state variable to false once the call has completed\n   * -    Call the validateResponse(errored, response) function defined previously\n   * -    If response passes validation, refresh the cart by calling refreshCart()\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * {\n   *      \"success\": true\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 404\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Product doesn't exist\"\n   * }\n   */\n  const postToCart = async (productId, qty) => {\n    let response = {};\n    let errored = false;\n    let statusCode;\n\n    setLoading(true);\n\n    try {\n      response = await (\n        await fetch(`${config.endpoint}/cart`, {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            productId: productId,\n            quantity: qty,\n          }),\n        })\n      ).json();\n    } catch (e) {\n      errored = true;\n    }\n\n    setLoading(false);\n\n    if (validateResponse(errored, response, statusCode)) {\n      await refreshCart();\n    }\n  };\n\n  const putToCart = async (productId, qty) => {\n    let response = {};\n    let errored = false;\n    let statusCode;\n\n    setLoading(true);\n\n    try {\n      let response_object = await fetch(`${config.endpoint}/cart`, {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          productId: productId,\n          quantity: qty,\n        }),\n      });\n\n      statusCode = response_object.status;\n      if (statusCode !== 204) {\n        response = await response_object.json();\n      }\n    } catch (e) {\n      errored = true;\n    }\n\n    setLoading(false);\n    if (\n      statusCode === \"204\" ||\n      validateResponse(errored, response, statusCode)\n    ) {\n      await refreshCart();\n    }\n  };\n\n  /**\n   * Function to get/refresh list of items in cart from backend and update state variable\n   * -    Call the previously defined getCart() function asynchronously and capture the returned value in a variable\n   * -    If the returned value exists,\n   *      -   Update items state variable with the response (optionally add the corresponding product object of that item as a sub-field)\n   * -    If the cart is being displayed from the checkout page, or the cart is empty,\n   *      -   Display an error message\n   *      -   Redirect the user to the products listing page\n   */\n  const refreshCart = async () => {\n    const cart = await getCart();\n    if (cart && cart.cartItems) {\n      setItems(\n        cart.cartItems.map((item) => ({\n          ...item,\n          product: products.find((product) => product._id === item.productId),\n        }))\n      );\n    }\n\n    if (checkout && items.length === 0) {\n      message.error(\"Cart is empty. Please add items to the cart first\");\n      history.push(\"/\");\n    }\n  };\n\n  useEffect(() => {\n    refreshCart();\n  }, []);\n\n  /**\n   * Return the complete JSX for the Cart component\n   *  If the items state variable has any data, display them\n   *  Else, display the appropriate message to the user and a button to return to the product listing page\n   */\n  return (\n    <div className=\"cart\">\n      {items.length ? (\n        <div className=\"cart-items\">\n          {items.map((item) => (\n            <Card className=\"cart-item\" key={item.productId}>\n              <img\n                className=\"cart-item-image\"\n                alt={item.product.name}\n                src={item.product.image}\n              />\n              <div className=\"cart-item-info\">\n                <div className=\"cart-item-title\">{item.product.name}</div>\n                <div className=\"cart-item-category\">\n                  Category: {item.product.category}\n                </div>\n                <div className=\"cart-item-price\">₹{item.product.cost}</div>\n              </div>\n              <div className=\"cart-item-actions\">\n                <InputNumber\n                  min={1}\n                  max={10}\n                  defaultValue={item.qty}\n                  onChange={(value) =>\n                    putToCart(item.productId, value).catch((e) =>\n                      message.error(\"Could not update cart.\")\n                    )\n                  }\n                />\n              </div>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"empty-cart\">\n          <ShoppingCartOutlined className=\"empty-cart-icon\" />\n          <h3>Cart is empty.</h3>\n          <Button\n            type=\"primary\"\n            onClick={() => history.push(\"/\")}\n            loading={loading}\n          >\n            Continue Shopping\n          </Button>\n        </div>\n      )}\n      {checkout && (\n        <div className=\"cart-footer\">\n          <div className=\"cart-total\">\n            Total: ₹\n            {items.reduce((total, item) => total + item.qty * item.product.cost, 0)}\n          </div>\n          <Button\n            type=\"primary\"\n            onClick={() => message.success(\"Order placed successfully\")}\n            loading={loading}\n          >\n            Place Order\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}